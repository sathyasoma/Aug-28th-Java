What is an Array?
An array is a collection of elements of the same data type stored in contiguous memory locations. Arrays are fixed in size, meaning that once they are created, their size cannot be changed.

Example:
int[] numbers = new int[5]; // Declares an array of integers with 5 elements
Declaring an Array
To declare an array, you specify the type of elements it will hold, followed by square brackets, and the variable name.

Syntax:
type[] arrayName;
Example:
int[] numbers;
String[] names;
Initializing an Array
You can initialize an array at the time of declaration or later in the code. Initialization sets the elements of the array to specific values.

Example:
// Initialize at declaration
int[] numbers = {1, 2, 3, 4, 5};

// Initialize after declaration
numbers = new int[5]; // Creates an array with 5 elements, all initialized to 0
Accessing Array Elements
Array elements are accessed using their index, which starts at 0 for the first element.

Example:
int[] numbers = {1, 2, 3, 4, 5};
int firstNumber = numbers[0]; // Accesses the first element
numbers[2] = 10; // Changes the third element to 10
Looping Through an Array
You can use loops to iterate through the elements of an array.

Example:
int[] numbers = {1, 2, 3, 4, 5};

// Using a for loop
for (int i = 0; i < numbers.length; i++) {
    System.out.println(numbers[i]);
}

// Using a for-each loop
for (int number : numbers) {
    System.out.println(number);
}
Length of an Array
The length of an array can be obtained using the length property.

Example:
int[] numbers = {1, 2, 3, 4, 5};
int length = numbers.length; // Length is 5
Multidimensional Arrays
Java supports multidimensional arrays, which are arrays of arrays. The most common type is the two-dimensional array.

Example:
// Declaring and initializing a two-dimensional array
int[][] matrix = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};

// Accessing elements of a two-dimensional array
int element = matrix[1][2]; // Accesses the element in the second row, third column (value is 6)
Common Array Operations
1. Copying Arrays
You can copy arrays using loops or the System.arraycopy method.

Example:
int[] original = {1, 2, 3, 4, 5};
int[] copy = new int[original.length];

// Using a loop
for (int i = 0; i < original.length; i++) {
    copy[i] = original[i];
}

// Using System.arraycopy
System.arraycopy(original, 0, copy, 0, original.length);
2. Searching Arrays
You can search for elements in an array using loops or utility methods from the java.util.Arrays class.

Example:
int[] numbers = {1, 2, 3, 4, 5};
int key = 3;
boolean found = false;

for (int number : numbers) {
    if (number == key) {
        found = true;
        break;
    }
}

// Using Arrays.binarySearch (array must be sorted)
int index = Arrays.binarySearch(numbers, key);
3. Sorting Arrays
You can sort arrays using the Arrays.sort method.

Example:
int[] numbers = {5, 3, 1, 4, 2};
Arrays.sort(numbers); // Sorts the array in ascending order
Use Cases for Arrays
1. Storing and Accessing Data
Arrays are commonly used to store and access large amounts of data efficiently.

Example:
String[] students = {"Alice", "Bob", "Charlie"};
System.out.println(students[1]); // Accesses the second element (Bob)
2. Performing Calculations
Arrays can be used to perform calculations on sets of numerical data.

Example:
int[] numbers = {1, 2, 3, 4, 5};
int sum = 0;
for (int number : numbers) {
    sum += number;
}
System.out.println("Sum: " + sum); // Outputs the sum of the array elements
3. Working with Collections
Arrays are often used to manage collections of objects, such as storing a list of objects of the same type.

Example:
class Student {
    String name;
    int age;

    Student(String name, int age) {
        this.name = name;
        this.age = age;
    }
}

public class Main {
    public static void main(String[] args) {
        Student[] students = {
            new Student("Alice", 20),
            new Student("Bob", 22),
            new Student("Charlie", 19)
        };

        for (Student student : students) {
            System.out.println(student.name + " is " + student.age + " years old.");
        }
    }
}







arrays
```

variables 

to store the values

  int a = 100;
  int b = 300;
  int c = 5656;
  
array is a group of elements of same type/homogenious

  int a = 333,34343,"ram";//compile time error inavlid
  
 syntax:
   
      <datatype> <variablename>[]= new <datatype>[5];
	  
  
eg:     int x[] = new int[3];


while we are storing the values into an arrays based on index the values
gets stored.

array index starts from 0th positon

                  x[0]=100;
		  x[1]=400;
		  x[2]=778;
		  
example:
``
package com.capgemini.jse.arrays;

public class Test1 {
	
	
 public static void main(String[] args) {
	
	 
	 //array varible declaration
	 
	 int x[] = new int[3];
	 
	 //assigning the values
	 
	 x[0]=3434;
	 x[1]=4545;
	 x[2]=786;
	 System.out.println(x[0]);
	 System.out.println(x[1]);
	 System.out.println(x[2]);
	 
}

}


array variable initialization:
==============================
package com.capgemini.jse.arrays;

public class Test1 {
	
	
 public static void main(String[] args) {
	
	 
	 //array variable initialization
	 
	 int x[] = {100,3434,343};
	 
	 System.out.println(x[0]);
	 System.out.println(x[1]);
	 System.out.println(x[2]);
	 
}

}

using for loop accessing array elements:
-----------------------------------
package com.capgemini.jse.arrays;

public class Test1 {
	
	
 public static void main(String[] args) {
	
	 
	 //array variable initialization
	 
	 int x[] = {100,3434,343};
	 
	 for(int i=0;i<3;i++)
	 {
		 System.out.println(x[i]);
	 }
	 
}

}


using for each loop accessing array elements:
===========================================
package com.capgemini.jse.arrays;

public class Test1 {
	
	
 public static void main(String[] args) {
	
	 
	 //array variable initialization
	 
	 int x[] = {100,3434,343};
	 
	 //enhanced for loop (for each loop)-jdk18
	 
	 for(int i:x)
	 {
		 System.out.println(i);
	 }
	 }
	 
}


note:
====
it is highly recommended to access array elements using for each loop


note:
======
we can apply for each loop either on array elements or collection 
elements.

length:
======

length is an implicit variable which is used to find out the
no.of elements of an array.


 System.out.println(x.length) ; // 3
 
 
example to pass an array to the method:
=======================================
package com.capgemini.jse.arrays;

public class Test2 {
	
	static void min(int arr[])
	{
		int min= arr[0];
		for(int i=1;i<arr.length;i++)
		
			if(min>arr[i])
				min=arr[i];
		
		System.out.println(min);
		
	}
	
	public static void main(String[] args) {
		
		int a[]= {33,3,4,5};
		
		min(a);//passing array to a method
		
	}

}


multi dimensional array:
========================
=======================
data is stored in row and column based index.

 eg: int arr[][] =  new int[3][3];
 eg: int arr[][]={{1,2,3},{2,4,5},{5,7,4}};


example:
```
package com.capgemini.jse.arrays;

public class Test3 {
	
	public static void main(String[] args) {
		
		int arr[][]={{1,2,3},{2,4,5},{5,7,4}};

		for(int i=0;i<arr.length;i++) {
			
			for(int j=0;j<3;j++)
			{
				System.out.print(arr[i][j] + " ");
			}
			System.out.println();
		}
	}

}


note:
----
for every array,since array is an object in java, for every array internally
proxy class gets created if we wan to get follow the program

package com.capgemini.jse.arrays;

public class Test4 {
	
	public static void main(String[] args) {
		
		
		int arr[]= {12,23,3};
		
		System.out.println(arr.getClass().getName());
	}

}


array variable allows object types:
`````
example:
```
package com.capgemini.jse.arrays;


class Employee
{
	int empid;
	String empname;
	public Employee(int empid,String empname)
	{
		this.empid=empid;
		this.empname=empname;
	}
	
	public String toString()
	{
		return empid + " " + empname;
	}
}
public class Test5 {
	
	public static void main(String[] args) {
		
		Employee e1=  new Employee(100,"ram");
		Employee e2 = new Employee(101,"rajarshi");
		Employee e3 = new Employee(102,"kinjol");
		
		Employee emp[]= {e1,e2,e3};
		
		for(Employee e: emp)
		{
			System.out.println(e);
		}
		
		
	}

}