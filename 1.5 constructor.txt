
DAY-8:
=============================================================
constructor:
`
   Student obj = new Student();
   
   Student --> name of the class
   obj --> name of the object
   =   -> assignment operator
   
   new --> dynamic memory allocation operator
   
   Student() --> constructor
   
rule:
``
constructor name must be similar to class name.
constructor should not return anything even void also.
   
if anything followed by () , we can call it as method.

constructor is a special member method

purpose:
```
to initialize the object.

->it is highly recommended to keep initalization logic inside constructor 
  not in normal method because to avoid explicit calling.
  
  
  


   int a;//variable declaration
   
   a=100;//assignment operations
   
   
   int a=100;//variable initialization(declaration + assigning)
   
   
   
ide's -> integrated development environment.

  eclipse,netbeans,intellij,myeclipse..


how to work with eclipse ide:
`````
1.download the eclipse from https://www.eclipse.org/downloads/packages/release/helios/sr1/eclipse-ide-java-developers

2.  once you get the zip file, extract the zip file and open the installation 
   folder of eclipse
   
3. there you find one eclipse application file

4. double click on that

5. select the workspace where you would like to save your program

6. click on launch

7. you will get welcome page of eclipse, just close it 

8.click on file --> new --> project --> java project

9.click on next

10.give the project name: ... and click on next

11.click on finish

12.right click on src folder, click on new --> click on class

13. give the class name: .... , click on finish


note:
``
whatever the code we are writing inside any ide, it is autocompiled
we no need to compile the code explicitly.

how can we execute the java code in ide:
`````
->right click on the program --> run as --> java application
->you can see the output in the console.


based on the datatype category, we do have default values.

 for integer category --> 0
 for float category --> 0.0
 for char category -->  single space
 for boolean category --> false
 for all class types --> null
 
 
example without constructor 
```

public class Student{
	
	//variable declaration
	int stid;
	String stname;
	
	//assign the values
	public void assign()
	{
		stid=100;
		stname="Ram";
	}
	
	//for displaying the values
	public void display()
	{
		System.out.println("student id " + stid);
		System.out.println("student name is " + stname);
	}
	
	//main method
	public static void main(String[] args) {
		
		//object creation
		
		Student obj = new Student();
		
		//calling assign()
		
		obj.assign();
		//calling display()
		obj.display();
	}

}


with constructor:
`` 

public class Student{
	
	//variable declaration
	int stid;
	String stname;
	
	
	public Student()
	{
		//intialization logic
		stid=100;
		stname="ram";
	}
	//for displaying the values
	public void display()
	{
		System.out.println("student id " + stid);
		System.out.println("student name is " + stname);
	}
	
	//main method
	public static void main(String[] args) {
		
		//object creation
		
		Student obj = new Student();
		
		//calling display()
		obj.display();
	}

}


DAY-9:
======================================================================

->to initialize the object.

to write the intialization logic.


 rules:

 1.constructor name must be similar to class name
 2.constructor should not return anything even void also.


types of constructors:
`````
->no-arg constructor/default constructor
->parameterized constructor

 
  no-arg constructor:

          1.user defined default constructor-our own values
          2.system defined default constructor-default values		  

	 
*when we did not define any default constructor, system defined default constructor can
 be generated by the java compiler and it is getting initialized with default values.

 when we define our own default constructor, obviously we are initialzing 
 with our own values.

parameterized constructor:
`````
it is the constructor which takes parameters.


example:
``

public class Student{
	
	//variable declaration
	int stid;
	String stname;
	
	//parameterized constructor
	public Student(int x,String y)
	{
		stid=x;
		stname=y;
	}
	
	
	//for displaying the values
	public void display()
	{
		System.out.println("student id " + stid);
		System.out.println("student name is " + stname);
	}
	
	//main method
	public static void main(String[] args) {
		
		//object creation
		
		Student obj = new Student(100,"shree");
		
		//calling display()
		obj.display();
	}

}


q. can we define both default and parameterized constructors?

  yes we can define
  
example:
``

public class Student{
	
	//default constructor
	public Student()
	{
		System.out.println("iam default constructor");
	}
	
	//parameterized constructor
	public Student(int x)
	{
		System.out.println("iam parameterized constructor");
	}
	
	
	
	//main method
	public static void main(String[] args) {
		
		
		Student st = new Student();
		
		Student st1 = new Student(100);
	}

}


what is the difference between default constructor and parameterized constructor?

in case of parameterized constructor, while we are creating the object
we can initalize the values but it is not happening in the case of 
default constructor.


note:
`````
default constructor is available in only one form, where as parameterized
constructor can be available in many forms.


note:
system defined default constructor will be generated by the 
java compiler when we are not defining any constructors in our
program/class.


if we define any parameterized constructors in our class, 
java compiler won't generated system defined default constructor.
